export const groups = {
  arithmetic: {
    add: {
      name: "add",
      comment: "addition operation",
      add: "0",
      args: "2",
      ret: "1",
    },
    mul: {
      name: "mul",
      comment: "multiplication operation",
      add: "0",
      args: "2",
      ret: "1",
    },
    sub: {
      name: "sub",
      comment: "subtraction operation",
      add: "0",
      args: "2",
      ret: "1",
    },
    div: {
      name: "div",
      comment: "integer division operation",
      add: "0",
      args: "2",
      ret: "1",
    },
    sdiv: {
      name: "sdiv",
      comment: "signed integer division operation",
      add: "0",
      args: "2",
      ret: "1",
    },
    mod: {
      name: "mod",
      comment: "modulo remainder operation",
      add: "0",
      args: "2",
      ret: "1",
    },
    smod: {
      name: "smod",
      comment: "signed modulo remainder operation",
      add: "0",
      args: "2",
      ret: "1",
    },
    addmod: {
      name: "addmod",
      comment: "unsigned modular addition",
      add: "0",
      args: "3",
      ret: "1",
    },
    mulmod: {
      name: "mulmod",
      comment: "unsigned modular multiplication",
      add: "0",
      args: "3",
      ret: "1",
    },
    exp: {
      name: "exp",
      comment: "exponential operation",
      add: "0",
      args: "2",
      ret: "1",
    },
    signextend: {
      name: "signextend",
      comment: "extend length of signed integer",
      add: "0",
      args: "2",
      ret: "1",
    },
    lt: {
      name: "lt",
      comment: "less-than comparison",
      add: "0",
      args: "2",
      ret: "1",
    },
    gt: {
      name: "gt",
      comment: "greater-than comparison",
      add: "0",
      args: "2",
      ret: "1",
    },
    slt: {
      name: "slt",
      comment: "signed less-than comparison",
      add: "0",
      args: "2",
      ret: "1",
    },
    sgt: {
      name: "sgt",
      comment: "signed greater-than comparison",
      add: "0",
      args: "2",
      ret: "1",
    },
    eq: {
      name: "eq",
      comment: "equality comparison",
      add: "0",
      args: "2",
      ret: "1",
    },
    iszero: {
      name: "iszero",
      comment: "simple not operator",
      add: "0",
      args: "1",
      ret: "1",
    },
    and: {
      name: "and",
      comment: "bitwise AND operation",
      add: "0",
      args: "2",
      ret: "1",
    },
    or: {
      name: "or",
      comment: "bitwise OR operation",
      add: "0",
      args: "2",
      ret: "1",
    },
    xor: {
      name: "xor",
      comment: "bitwise XOR operation",
      add: "0",
      args: "2",
      ret: "1",
    },
    not: {
      name: "not",
      comment: "bitwise NOT operation",
      add: "0",
      args: "1",
      ret: "1",
    },
    byte: {
      name: "byte",
      comment: "retrieve single byte from word",
      add: "0",
      args: "2",
      ret: "1",
    },
    shl: {
      name: "shl",
      comment: "bitwise SHL operation",
      add: "0",
      args: "2",
      ret: "1",
    },
    shr: {
      name: "shr",
      comment: "bitwise SHR operation",
      add: "0",
      args: "2",
      ret: "1",
    },
    sar: {
      name: "sar",
      comment: "bitwise SAR operation",
      add: "0",
      args: "2",
      ret: "1",
    },
  },
  compute: {
    keccak256: {
      name: "keccak256",
      comment: "compute KECCAK-256 hash",
      add: "0",
      args: "2",
      ret: "1",
    },
  },
  env: {
    address: {
      name: "address",
      comment: "get address of currently executing account",
      add: "0",
      args: "0",
      ret: "1",
    },
    selfbalance: {
      name: "selfbalance",
      comment: "get balance of the current account",
      add: "0",
      args: "0",
      ret: "1",
    },
    caller: {
      name: "caller",
      comment: "get caller address",
      add: "0",
      args: "0",
      ret: "1",
    },
    callvalue: {
      name: "callvalue",
      comment:
        "get deposited value by the instruction/transaction responsible for this execution",
      add: "0",
      args: "0",
      ret: "1",
    },
    calldataload: {
      name: "calldataload",
      comment: "get input data of current environment",
      add: "0",
      args: "1",
      ret: "1",
    },
    calldatasize: {
      name: "calldatasize",
      comment: "get size of input data in current environment",
      add: "0",
      args: "0",
      ret: "1",
    },
    calldatacopy: {
      name: "calldatacopy",
      comment: "copy input data in current environment to memory",
      add: "0",
      args: "3",
      ret: "0",
    },
    codesize: {
      name: "codesize",
      comment: "get size of code running in current environment",
      add: "0",
      args: "0",
      ret: "1",
    },
    codecopy: {
      name: "codecopy",
      comment: "copy code running in current environment to memory",
      add: "0",
      args: "3",
      ret: "0",
    },
    returndatasize: {
      name: "returndatasize",
      comment: "get size of return data buffer",
      add: "0",
      args: "0",
      ret: "1",
    },
    returndatacopy: {
      name: "returndatacopy",
      comment: "copy return data in current environment to memory",
      add: "0",
      args: "3",
      ret: "0",
    },
  },
  calldata: {
    calldataload: {
      name: "calldataload",
      comment: "get input data of current environment",
      add: "0",
      args: "1",
      ret: "1",
    },
    calldatasize: {
      name: "calldatasize",
      comment: "get size of input data in current environment",
      add: "0",
      args: "0",
      ret: "1",
    },
    calldatacopy: {
      name: "calldatacopy",
      comment: "copy input data in current environment to memory",
      add: "0",
      args: "3",
      ret: "0",
    },
  },
  tx: {
    gasprice: {
      name: "gasprice",
      comment: "get price of gas in current environment",
      add: "0",
      args: "0",
      ret: "1",
    },
    origin: {
      name: "origin",
      comment: "get execution origination address",
      add: "0",
      args: "0",
      ret: "1",
    },
  },
  account: {
    balance: {
      name: "balance",
      comment: "get balance of the given account",
      add: "0",
      args: "1",
      ret: "1",
    },
    extcodesize: {
      name: "extcodesize",
      comment: "get external code size (from another contract)",
      add: "0",
      args: "1",
      ret: "1",
    },
    extcodecopy: {
      name: "extcodecopy",
      comment: "copy external code (from another contract)",
      add: "0",
      args: "4",
      ret: "0",
    },
    extcodehash: {
      name: "extcodehash",
      comment: "get external code hash (from another contract)",
      add: "0",
      args: "1",
      ret: "1",
    },
    call: {
      name: "call",
      comment: "message-call into an account",
      add: "0",
      args: "7",
      ret: "1",
    },
    callcode: {
      name: "callcode",
      comment: "message-call with another account's code only",
      add: "0",
      args: "7",
      ret: "1",
    },
    delegatecall: {
      name: "delegatecall",
      comment: "like CALLCODE but keeps caller's value and sender",
      add: "0",
      args: "6",
      ret: "1",
    },
    staticcall: {
      name: "staticcall",
      comment: "like CALL but disallow state modifications",
      add: "0",
      args: "6",
      ret: "1",
    },
  },
  block: {
    blockhash: {
      name: "blockhash",
      comment: "get hash of most recent complete block",
      add: "0",
      args: "1",
      ret: "1",
    },
    coinbase: {
      name: "coinbase",
      comment: "get the block's coinbase address",
      add: "0",
      args: "0",
      ret: "1",
    },
    timestamp: {
      name: "timestamp",
      comment: "get the block's timestamp",
      add: "0",
      args: "0",
      ret: "1",
    },
    number: {
      name: "number",
      comment: "get the block's number",
      add: "0",
      args: "0",
      ret: "1",
    },
    difficulty: {
      name: "difficulty",
      comment: "get the block's difficulty",
      add: "0",
      args: "0",
      ret: "1",
    },
    gaslimit: {
      name: "gaslimit",
      comment: "get the block's gas limit",
      add: "0",
      args: "0",
      ret: "1",
    },
    chainid: {
      name: "chainid",
      comment: "get the config's chainid param",
      add: "0",
      args: "0",
      ret: "1",
    },
    basefee: {
      name: "basefee",
      comment: "get the block's basefee",
      add: "0",
      args: "0",
      ret: "1",
    },
  },
  machine: {
    pop: {
      name: "pop",
      comment: "remove item from stack",
      add: "0",
      args: "1",
      ret: "0",
    },
    mload: {
      name: "mload",
      comment: "load word from memory",
      add: "0",
      args: "1",
      ret: "1",
    },
    mstore: {
      name: "mstore",
      comment: "save word to memory",
      add: "0",
      args: "2",
      ret: "0",
    },
    mstore8: {
      name: "mstore8",
      comment: "save byte to memory",
      add: "0",
      args: "2",
      ret: "0",
    },
    sload: {
      name: "sload",
      comment: "load word from storage",
      add: "0",
      args: "1",
      ret: "1",
    },
    sstore: {
      name: "sstore",
      comment: "save word to storage",
      add: "0",
      args: "2",
      ret: "0",
    },
    pc: {
      name: "pc",
      comment: "get the program counter",
      add: "0",
      args: "0",
      ret: "1",
    },
    msize: {
      name: "msize",
      comment: "get the size of active memory",
      add: "0",
      args: "0",
      ret: "1",
    },
    gas: {
      name: "gas",
      comment: "get the amount of available gas",
      add: "0",
      args: "0",
      ret: "1",
    },
  },
  log: {
    log0: {
      name: "log0",
      comment: "Makes a log entry; no topics.",
      add: "0",
      args: "2",
      ret: "0",
    },
    log1: {
      name: "log1",
      comment: "Makes a log entry; 1 topic.",
      add: "0",
      args: "3",
      ret: "0",
    },
    log2: {
      name: "log2",
      comment: "Makes a log entry; 2 topics.",
      add: "0",
      args: "4",
      ret: "0",
    },
    log3: {
      name: "log3",
      comment: "Makes a log entry; 3 topics.",
      add: "0",
      args: "5",
      ret: "0",
    },
    log4: {
      name: "log4",
      comment: "Makes a log entry; 4 topics.",
      add: "0",
      args: "6",
      ret: "0",
    },
  },
  call: {
    create: {
      name: "create",
      comment: "create a new account with associated code",
      add: "0",
      args: "3",
      ret: "1",
    },
    create2: {
      name: "create2",
      comment:
        "create new account with associated code at address sha3( + sender + salt + init code) % 2**160",
      add: "0",
      args: "4",
      ret: "1",
    },
    call: {
      name: "call",
      comment: "message-call into an account",
      add: "0",
      args: "7",
      ret: "1",
    },
    callcode: {
      name: "callcode",
      comment: "message-call with another account's code only",
      add: "0",
      args: "7",
      ret: "1",
    },
    delegatecall: {
      name: "delegatecall",
      comment: "like CALLCODE but keeps caller's value and sender",
      add: "0",
      args: "6",
      ret: "1",
    },
    staticcall: {
      name: "staticcall",
      comment: "like CALL but disallow state modifications",
      add: "0",
      args: "6",
      ret: "1",
    },
  },
  halt: {
    return: {
      name: "return",
      comment: "halt execution returning output data",
      add: "0",
      args: "2",
      ret: "0",
    },
    stop: {
      name: "stop",
      comment: "halts execution",
      add: "0",
      args: "0",
      ret: "0",
    },
    revert: {
      name: "revert",
      comment: "halt execution, revert state and return output data",
      add: "0",
      args: "2",
      ret: "0",
    },
    invalid: {
      name: "invalid",
      comment:
        "invalid instruction for expressing runtime errors (e.g., division-by-zero)",
      add: "0",
      args: "0",
      ret: "0",
    },
    selfdestruct: {
      name: "selfdestruct",
      comment: "halt execution and register account for later deletion",
      add: "0",
      args: "1",
      ret: "0",
    },
  },
};
